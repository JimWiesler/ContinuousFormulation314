<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.36">
  <POU Name="MTSerial" Id="{1f20a549-e9fe-4eda-9364-61036dc798d9}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MTSerial
VAR
	// Comm buffers
	RxBufferMT			: ComBuffer;	// Receive data buffer for Mettler Toledo
	TxBufferMT			: ComBuffer;	// Transmit data buffer for Mettler Toledo
	// background communication with the EL6002 port
	fbPortCtrl		: SerialLineControl; // must be called every scan
	bPortCtrlError	: BOOL;
	ePortCtrlErrorID	: ComError_t;
	// I/O variables for a EL6001 terminal
	stIn_Port AT %I*	: EL6inData22B;	// linked to the EL6002 in the TwinCAT System Manager
	stOut_Port AT %Q*	: EL6outData22B; // linked to the EL6002 in the TwinCAT System Manager
	
	// Variables for sending data
	fbSend		: SendString;
	bSendBusy	: BOOL;
	eSendErrorID: ComError_t;

	// Variables for receiving data
	fbReceive		: ReceiveString;
	sReceivedString	: STRING;
	bStringReceived	: BOOL;
	bReceiveBusy	: BOOL;
	bReceiveError	: BOOL;
	eReceiveErrorID	: ComError_t;
	bReceiveTimeout	: BOOL;
	nReceiveCounter	: UDINT := 0;
	sLastReceivedString: STRING;
END_VAR

VAR_IN_OUT
	sSendString: STRING;
	weight: sWeight;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// *********************************************************************************
// The SerialLineControl function block is supposed to be called in every PLC cycle.
// It communicates with the serial line hardware device and transmits or receives data.
// The SerialLineControl can be called in the standard task (e.g.for PcCOM port usage) 
// or in a separate fast task (e.g.for terminal usage) as well.
// A fast separate task will be necessary at high baud rates or with KL6001 terminals 
// which have a small process image (3 or 5 data bytes only)
// **********************************************************************************

// background communication with the Port terminal
fbPortCtrl(
	Mode:= SERIALLINEMODE_EL6_22B, 
	pComIn:= ADR(stIn_Port), 
	pComOut:= ADR(stOut_Port), 
	SizeComIn:= UINT_TO_INT(SIZEOF(stIn_Port)), 
	Error=> , 
	ErrorID=> , 
	TxBuffer:= TxBufferMT, 
	RxBuffer:= RxBufferMT );
IF fbPortCtrl.Error THEN
	bPortCtrlError := TRUE;
	ePortCtrlErrorID := fbPortCtrl.ErrorID;
END_IF


// Call the send block if the sSendString has a value to send.
// Also call the block as long as it is busy to finish a transmission.
// When the transmission is complete clear sSendString to prepare for next string to send
IF len(sSendString) > 0 THEN
	fbSend(	SendString:= sSendString,
			TXbuffer:= TxBufferMT,
			Busy=> bSendBusy,
			Error=> );
	IF fbSend.Error <> COMERROR_NOERROR THEN
		eSendErrorID := fbSend.Error;
	END_IF
	IF NOT bSendBusy THEN
		sSendString := '';
	END_IF
END_IF

//	Receive string data:
//	The block receives any data strings ending with an CRLF characters.	
fbReceive(
	Prefix:= '',
	Suffix:= '$0D$0A',
	Timeout:= T#1s,
	ReceivedString:= sReceivedString,
	RXbuffer:= RxBufferMT,
	StringReceived=> bStringReceived,
	Busy=> bReceiveBusy,
	Error=> ,
	RxTimeout=> bReceiveTimeout );
IF fbReceive.Error <> COMERROR_NOERROR THEN
	eReceiveErrorID := fbReceive.Error;
END_IF
IF bStringReceived THEN
	nReceiveCounter := nReceiveCounter + 1;
	sLastReceivedString := sReceivedString;
	weight := MT_SICS_TO_Weight(weight, sLastReceivedString);
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>