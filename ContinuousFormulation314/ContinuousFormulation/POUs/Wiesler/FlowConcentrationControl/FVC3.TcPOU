<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.36">
  <POU Name="FVC3" Id="{1ccc80b6-3314-432f-9d58-685ee6ab8b6c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FVC3

VAR_INPUT
	mode : UINT := 0; // 0 = manual, 1 = valve controlled by conc spec
	FTA : AI; 
	FTB : AI;
	ATC : ModbusTCPReveal();
	cc : CC1;
	scanMS : LREAL := 1.0;  // number of milliseconds per scan of this module
	timeBaseMS : LREAL := 1000.0*60.0; // time base in milliseconds of the flow measurement.  Like mL/min timebase is minutes, so 60*1000 milliseconds
	API_Concentration : LREAL := 42.0; // mg/mL
END_VAR
VAR_IN_OUT
	FV : FV3;
END_VAR
VAR_OUTPUT
END_VAR
VAR CONSTANT
	nPoints : DINT := 200;
END_VAR
VAR
	//Variables for calculating when new concentration element has been created
	FQAscan : LREAL := 0.0;
	FQBscan : LREAL := 0.0;
	FQA: LREAL := 0.0;
	FQB: LREAL := 0.0;
	FQAscanAdd : LREAL := 0.0;
	FQBscanAdd : LREAL := 0.0;
	temp : LREAL := 0.0;
	
	//Setup geometry and element size
	elementMass : LREAL := 0.5;  //Each element has this amount in grams - change here may require arrays to be bigger
	massBeforePAT : LREAL := 23.0;  //calculated based on current tubing geometry
	PATelement : INT; //element number for PAT
	massBeforeDivert : LREAL := 31.0;
	divertElement : INT; //element number for diversion tee

	//Defaults
	PATConcDefault : LREAL := -100.0;
	PATCountDefault : UINT := 0;
	PATVarianceDefault : LREAL := 0.0;
	elementConcentration : LREAL := -100.0;
	PATTimeDefault : ULINT := 0;
	elStatusDefault : elementStatus := Bad;
	
	//arrays
	mixTime : ARRAY[0..nPoints] OF ULINT;
	rawConc : ARRAY[0..nPoints] OF LREAL; //calculated raw concentration - from API and Buffer conc/flow at mixing tee
	modeledConc : ARRAY[0..nPoints] OF LREAL; //Adjusted conc with mixing effects from laminar flow and back mixer
	PATConc : ARRAY[0..nPoints] OF LREAL; //Average of unique PAT results for the element in the flow cell
	PATCount : ARRAY[0..nPoints] OF UINT; //Count of unique PAT results for the element in the flow cell
	PATVariance : ARRAY[0..nPoints] OF LREAL; //Variance of unique PAT results for the element in the flow cell
		// Get stdev from variance via sqrt(variance/count) or sqrt(variance/(count-1))
	PATTime : ARRAY[0..nPoints] OF ULINT;
	elStatus : ARRAY[0..nPoints] OF elementStatus;
	
	//values to determine in spec or out of spec
	concSpecHi : LREAL := 0.1; // in spec hi limit is concentration control setpoint + this value
	concSpecLo : LREAL := 0.1; // in spec lo limit is concentration control setpoint - this value
	
	//variable to track diversion logic
	divert : BOOL := TRUE;
	
	//value to determine if PAT reading is new
	lastReadingID : DINT := 0;
	lastElStatus : elementStatus := Bad;
	PATtimeoutTime : TIME := T#100MS;
	fbPATtimeout : TON; //timer for determing timeout of PAT
	
	//local variable
	i : INT := 0;
	firstElementTimeMS : ULINT;  //used on network logic to subscribe to changes in arrays
	lastPATConcAverage: LREAL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[PATelement := LREAL_TO_INT(massBeforePAT/elementMass);  //PAT element in array
divertElement := LREAL_TO_INT(massBeforeDivert/elementMass);  //Divert tee element in array

// check for new PAT reading
fbPATtimeout(IN := (lastReadingID = ATC.readingID), PT := PATtimeoutTime);

IF lastReadingID <> ATC.readingID THEN
	//calculate running average and variance:
	// http://dsp.stackexchange.com/questions/811/determining-the-mean-and-standard-deviation-in-real-time
	IF PATCount[PATelement] < 1 THEN
		PATConc[PATelement] := 0.0; //if no measurements yet set previous concentration to 0
	END_IF
	lastPATConcAverage := PATConc[PATelement];                                                         //prev_mean
	PATCount[PATelement] := PATCount[PATelement] + 1;                      							   //n
	PATConc[PATelement] := lastPATConcAverage + (ATC.pv - lastPATConcAverage)/PATCount[PATelement];    //m
	PATVariance[PATelement] := PATVariance[PATelement] + (ATC.pv - PATConc[PATelement]) * (ATC.pv - lastPATConcAverage); //S
	// where S = n * variance .... http://people.ds.cam.ac.uk/fanf2/hermes/doc/antiforgery/stats.pdf
	PATTime[PATelement] := unixTime;
END_IF

// integrate flow transmitter values.
FQAscan := FTA.pv*scanMS/timeBaseMS;
FQBscan := FTB.pv*scanMS/timeBaseMS;
temp := FQA + FQB + FQAscan + FQBscan;

//if new flow makes the incoming element large enough, capture a flow element, shift the arrays, execute concentration modeling and control system
IF (temp >= elementMass) THEN
	// determine how much of new API and buffer flow should be added
	temp := elementMass - FQA - FQB;  //amount of element added this scan
	FQAscanAdd := FQAscan * temp / (FQAscan + FQBscan);
	FQBscanAdd := FQBScan * temp / (FQAscan + FQBscan);
	
	FQA := FQA + FQAscanAdd;
	FQB := FQB + FQBscanAdd;
	elementConcentration := API_concentration*FQA/(FQA + FQB);
	
	//Set current element status.  If PAT has timed out, set status to Timeout.
	IF fbPATtimeout.Q THEN  //no update from PAT within timeout time
		elStatus[PATelement] := Timeout;
		lastElStatus := Timeout;
	ELSIF PATCount[PATelement] = 0 THEN //no PAT update for this element, but PAT has not timedout
		IF lastElStatus = Good THEN
			elStatus[PATelement] := Unknown;  //if last PAT result was good, set this to unknown
		ELSE
			elStatus[PATelement] := lastElStatus; //otherwise, set it to Timeout or Bad to make sure unchecked elements are failsafe
		END_IF
	ELSIF PATConc[PATelement] > (cc.conc.sp - concSpecLo) AND PATConc[PATelement] < (cc.conc.sp + concSpecHi) THEN //within spec
		elStatus[PATelement] := Good;
		lastElStatus := Good;
	ELSE //otherwise mark as bad
		elStatus[PATelement] := Bad;
		lastElStatus := Bad;
	END_IF
	
	// shift arrays & initialize new element
	fShiftArray(sizeofArrayElement := SIZEOF(unixTime), pInsertedElement := ADR(unixTime),
				sizeofArray := SIZEOF(mixTime), pArray := ADR(mixTime));
	fShiftArray(sizeofArrayElement := SIZEOF(elementConcentration), pInsertedElement := ADR(elementConcentration),
				sizeofArray := SIZEOF(rawConc), pArray := ADR(rawConc));
	fShiftArray(sizeofArrayElement := SIZEOF(elementConcentration), pInsertedElement := ADR(elementConcentration),
				sizeofArray := SIZEOF(modeledConc), pArray := ADR(modeledConc)); //Change this when modeling
	fShiftArray(sizeofArrayElement := SIZEOF(PATConcDefault), pInsertedElement := ADR(PATConcDefault),
				sizeofArray := SIZEOF(PATConc), pArray := ADR(PATConc));
	fShiftArray(sizeofArrayElement := SIZEOF(PATCountDefault), pInsertedElement := ADR(PATCountDefault),
				sizeofArray := SIZEOF(PATCount), pArray := ADR(PATCount));
	fShiftArray(sizeofArrayElement := SIZEOF(PATVarianceDefault), pInsertedElement := ADR(PATVarianceDefault),
				sizeofArray := SIZEOF(PATVariance), pArray := ADR(PATVariance));
	fShiftArray(sizeofArrayElement := SIZEOF(PATTimeDefault), pInsertedElement := ADR(PATTimeDefault),
				sizeofArray := SIZEOF(PATTime), pArray := ADR(PATTime));
	fShiftArray(sizeofArrayElement := SIZEOF(elStatusDefault), pInsertedElement := ADR(elStatusDefault),
				sizeofArray := SIZEOF(elStatus), pArray := ADR(elStatus));
	firstElementTimeMS := unixTime;
	
	//Determine divert status
	divert := FALSE;
	FOR i := (PATelement + 1) TO divertElement BY 1 DO
		IF elStatus[i] = Bad OR elStatus[i] = Timeout THEN
			divert := TRUE;
		END_IF
	END_FOR

	FQA := FQAscan - FQAscanAdd; //retain the remainder in FQA and FQB
	FQB := FQBscan - FQBscanAdd;
ELSE 
	// not enough for new element so continue to accumulate flows
	FQA := FQA + FQAscan;
	FQB := FQB + FQBscan;
END_IF

//control valve position if in auto
IF mode = 1 THEN
	FV.sp := NOT divert; // waste: false; filler: true
END_IF

//Update last values
lastReadingID := ATC.readingID;]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>