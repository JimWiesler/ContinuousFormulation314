<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.36">
  <POU Name="FVC3" Id="{1ccc80b6-3314-432f-9d58-685ee6ab8b6c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FVC3
VAR_INPUT
	mode : UINT := 0; // 0 = manual, 1 = valve controlled by conc spec
	tol : LREAL := 0.01; // +/- percent that concentration can be off from sp 
	conc : LREAL := -1.0; // ModbusTCPReveal?? - AT9999C.pv ??
	targetConc : sAnalogConstraint := (sp := 0.0, rq := -100.0, mn := 0.0, mx := 500.0);
	c : sAnalogConstraint := (sp := 0.0, rq := -100.0, mn := 0.0, mx := 500.0); // mL/min
	
	FTA : AI; // do we need to use OLS results? .. using pv, not pvfilt..
	FTB : AI;
	scanMS : INT := 50;
	timeBaseMS : INT := 1;
	API_Concentration : LREAL := 42; // mg/mL
END_VAR
VAR_IN_OUT
	FTC : ModbusTCPReveal();
	FV : FV3;
	PumpA : sMasterflexPort;
	PumpB : sMasterflexPort;
END_VAR
VAR_OUTPUT
END_VAR
VAR CONSTANT
	nPoints : DINT := 1000;
END_VAR
VAR
	FQAscan : LREAL := 0;
	FQBscan : LREAL := 0;
	FQA: LREAL := 0;
	FQB: LREAL := 0;
	FQAscanAdd : LREAL := 0;
	FQBscanAdd : LREAL := 0;
	temp : LREAL := 0;
	elementMass : LREAL := 0;
	
	cLow : sAnalogConstraint := (sp := 0.0, rq := -100.0, mn := 0.0, mx := 500.0);
	cHigh : sAnalogConstraint := (sp := 0.0, rq := -100.0, mn := 0.0, mx := 500.0);
	outSpec : BOOL := FALSE;
	t : ULINT := unixTime;
	
	FT2PAT : DINT := 100;
	
	
	nCount : DINT := 0;
	expectedConc : ARRAY[0..nPoints] OF LREAL;
	actualConc : ARRAY[0..nPoints] OF LREAL;
	inSpec : ARRAY[0..nPoints] OF BOOL;
	PATTime : ARRAY[0..nPoints] OF ULINT;
	FTTIme : ARRAY[0..nPoints] OF ULINT;
	initConc : LREAL := -100;
	initSpec : BOOL :=FALSE;
	
	ACIndex : DINT := FT2PAT; 
	lastBad : ULINT := 0;
	
	i : DINT := 0;
	goodCount : DINT := 0;
	goodToOpen : DINT := 10;
	
	
	elementConcentration: LREAL := 0;
	concSum : LREAL := 0;
	concCount : DINT := 0;
	lastPAT : LREAL := 0;
	lastPATTime : ULINT := 0;
	stalePAT : BOOL := FALSE;
	PATScanMS : ULINT := 50;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[t := unixTime;

// Calculate element
// integrate flow transmitter values
FQAscan := FTA.pv*scanMS/timeBaseMS;
FQBscan := FTB.pv*scanMS/timeBaseMS;
temp := FQA + FQB + FQAscan + FQBscan;

IF (temp >= elementMass) THEN
	// determine how much of new API and buffer flow should be added
	temp := elementMass - FQA - FQB;
	FQAscanAdd := FQAscan * temp / (FQAscan + FQBscan);
	FQBscanAdd := FQBScan * temp / (FQAscan + FQBscan);
	
	FQA := FQA + FQAscanAdd;
	FQB := FQB + FQBscanAdd;
	elementConcentration := API_concentration*FQA/(FQA + FQB);
	
//	// shift array
//	FOR i := nPoints TO 1 BY -1 DO
//		expectedConc[i] := expectedConc[i-1];
//		actualConc[i] := actualConc[i-1];
//		inSpec[i] := inSpec[i-1];
//		PATTime[i] := PATTime[i-1];
//		FTTime[i] := FTTime[i-1];
//	END_FOR
	
//	// initialize first index
//	expectedConc[0] := elementConcentration;
//	FTTime[0] := t;
//	inSpec[0] := FALSE; // initialize as "bad" conc dose ... change this??
//	PATTime[ACIndex] := t; // or should this be ACIndex + 1 ?? think on how determining ACIndex
//	actualConc[0] := -100;
		
	// shift bytes & initialize new element
	fShiftArray(cbData := SIZEOF(elementConcentration), pData := ADR(elementConcentration),
				cbBuffer := SIZEOF(expectedConc), pBuffer := ADR(expectedConc)
	);
	fShiftArray(cbData := SIZEOF(initConc), pData := ADR(initConc),
				cbBuffer := SIZEOF(actualConc), pBuffer := ADR(actualConc)
	);
	fShiftArray(cbData := SIZEOF(initSpec), pData := ADR(initSpec),
				cbBuffer := SIZEOF(inSpec), pBuffer := ADR(inSpec)
	);
	fShiftArray(cbData := SIZEOF(t), pData := ADR(t),
				cbBuffer := SIZEOF(PATTime), pBuffer := ADR(PATTime)
	);
	fShiftArray(cbData := SIZEOF(t), pData := ADR(t),
				cbBuffer := SIZEOF(FTTime), pBuffer := ADR(FTTime)
	);

	actualConc[ACIndex] := concSum / concCount;
	concCount := 0;
	
	FQA := FQAscan - FQAscanAdd;
	FQB := FQBscan - FQBscanAdd;
ELSE 
	// not enough for new elmenet so continue to accumulate flows
	FQA := FQA + FQAscan;
	FQB := FQB + FQBscan;
	
END_IF

 
// not sure if this is necessary...
cLow.mn := targetConc.mn;
cHigh.mn := targetConc.mn;
cLow.mx := targetConc.mx;
cHigh.mx := targetConc.mx;

// set tolerance limit based on percent tolerance
cLow.sp := LIMIT(cLow.mn, targetConc.sp - tol * targetConc.sp, cLow.mx);
cHigh.sp := LIMIT(cHigh.mn, targetConc.sp + tol * targetConc.sp, cHigh.mx);

// check for new PAT reading
IF conc <> lastPAT THEN
	concSum := concSum + conc;
	concCount := concCount + 1;
	lastPAT := conc;
	lastPATTime := t;
	stalePAT := FALSE;
END_IF

// TODO : check for stale PAT readings
IF (t - lastPATTime) > PATScanMS*2 THEN
	// divert immediately
	FV.sp := FALSE;
	IF (t - lastPATTime) > PATScanMS*5 THEN
		// Shutdown
		IF PumpA.bRun THEN
			PumpA.nRun_RQ := 0;
		END_IF
		IF PumpB.bRun THEN
			PumpB.nRun_RQ := 0;
		END_IF
	END_IF
END_IF

// check for out of spec concentration
IF (conc < cLow.sp) OR (conc > cHigh.sp) THEN
	lastBad := PATTime[ACIndex];
	inSpec[ACIndex] := FALSE;
	
	// Divert immediately
	FV.sp := FALSE;
	goodCount := 0;
END_IF

// check for concentration in spec AND sufficient time passed since "bad"
// TODO : update w volume element
IF (actualConc[ACIndex] > cLow.sp) AND (actualConc[ACIndex] < cHigh.sp) THEN
	// check if sufficient time has passed since last bad concentration
	IF (lastPAT <> conc) THEN // just got new good value
		inSpec[ACIndex] := TRUE;
		goodCount := goodCount + 1;
		IF goodCount >= goodToOpen THEN // has been long enough since last "bad" conc
			FV.sp := TRUE;
		END_IF
	END_IF
	
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>